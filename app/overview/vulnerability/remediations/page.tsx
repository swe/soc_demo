'use client'
import { formatDate, formatDateTime } from '@/lib/utils'


import { useEffect, useState } from 'react'
import { usePageTitle } from '@/app/page-title-context'
import { PageHeader, Card, Badge } from '@/components/ui/card'

interface Remediation {
  id: string
  vulnerability: string
  cve: string
  action: string
  priority: 'critical' | 'high' | 'medium' | 'low'
  status: 'scheduled' | 'in-progress' | 'completed' | 'failed' | 'rollback'
  assignedTo: string
  scheduledDate: string
  completedDate?: string
  affectedSystems: number
  successRate: number
}

export default function RemediationsPage() {
  const { setPageTitle } = usePageTitle()
  const [filterStatus, setFilterStatus] = useState<string>('all')

  useEffect(() => {
    setPageTitle('Remediations')
  }, [setPageTitle])

  const remediations: Remediation[] = [
    {
      id: 'REM-001',
      vulnerability: 'Apache Struts RCE',
      cve: 'CVE-2024-1234',
      action: 'Apply security patch 2.5.31',
      priority: 'critical',
      status: 'in-progress',
      assignedTo: 'DevOps Team',
      scheduledDate: '2024-03-30',
      affectedSystems: 23,
      successRate: 65
    },
    {
      id: 'REM-002',
      vulnerability: 'SQL Injection',
      cve: 'CVE-2024-5678',
      action: 'Update application to v3.2.1',
      priority: 'high',
      status: 'scheduled',
      assignedTo: 'Development Team',
      scheduledDate: '2024-04-02',
      affectedSystems: 12,
      successRate: 0
    },
    {
      id: 'REM-003',
      vulnerability: 'Authentication Bypass',
      cve: 'CVE-2024-9012',
      action: 'Deploy hotfix and restart services',
      priority: 'critical',
      status: 'completed',
      assignedTo: 'Security Team',
      scheduledDate: '2024-03-25',
      completedDate: '2024-03-26',
      affectedSystems: 45,
      successRate: 100
    },
    {
      id: 'REM-004',
      vulnerability: 'XSS Vulnerability',
      cve: 'CVE-2024-3456',
      action: 'Implement input validation',
      priority: 'medium',
      status: 'completed',
      assignedTo: 'Development Team',
      scheduledDate: '2024-03-20',
      completedDate: '2024-03-23',
      affectedSystems: 8,
      successRate: 100
    },
    {
      id: 'REM-005',
      vulnerability: 'Privilege Escalation',
      cve: 'CVE-2024-7890',
      action: 'Kernel update to 5.15.0-97',
      priority: 'high',
      status: 'failed',
      assignedTo: 'System Admins',
      scheduledDate: '2024-03-28',
      affectedSystems: 67,
      successRate: 25
    }
  ]

  const getPriorityColor = (priority: string) => {
    const colors = {
      critical: 'bg-rose-600 dark:bg-rose-700/20 text-red-700 dark:text-red-400',
      high: 'bg-orange-600 dark:bg-orange-700/20 text-orange-700 dark:text-orange-400',
      medium: 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      low: 'bg-indigo-600 dark:bg-indigo-600/20 text-blue-700 dark:text-blue-400'
    }
    return colors[priority as keyof typeof colors]
  }

  const getStatusColor = (status: string) => {
    const colors = {
      scheduled: 'bg-indigo-600 dark:bg-indigo-600/20 text-blue-700 dark:text-blue-400',
      'in-progress': 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      completed: 'bg-emerald-600 dark:bg-emerald-700/20 text-green-700 dark:text-green-400',
      failed: 'bg-rose-600 dark:bg-rose-700/20 text-red-700 dark:text-red-400',
      rollback: 'bg-orange-600 dark:bg-orange-700/20 text-orange-700 dark:text-orange-400'
    }
    return colors[status as keyof typeof colors]
  }

  const filteredRems = filterStatus === 'all' 
    ? remediations 
    : remediations.filter(r => r.status === filterStatus)

  const stats = {
    total: remediations.length,
    completed: remediations.filter(r => r.status === 'completed').length,
    inProgress: remediations.filter(r => r.status === 'in-progress').length,
    failed: remediations.filter(r => r.status === 'failed').length
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-7xl mx-auto">
      <PageHeader 
        title="Vulnerability Remediation" 
        description="Track and manage vulnerability remediation activities" 
      />

      {/* Stats */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Remediations</div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{stats.total}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Completed</div>
            <div className="text-3xl font-bold text-emerald-700 dark:text-emerald-400">{stats.completed}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">In Progress</div>
            <div className="text-3xl font-bold text-amber-700 dark:text-amber-400">{stats.inProgress}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Failed</div>
            <div className="text-3xl font-bold text-rose-700 dark:text-rose-400">{stats.failed}</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="mb-6">
        <div className="flex flex-wrap gap-2">
          {['all', 'scheduled', 'in-progress', 'completed', 'failed'].map(status => (
            <button
              key={status}
              onClick={() => setFilterStatus(status)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                filterStatus === status
                  ? 'bg-indigo-600 dark:bg-indigo-500 text-white shadow-sm'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700/50'
              }`}
            >
              {status === 'all' ? 'All Status' : status.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}
            </button>
          ))}
        </div>
      </div>

      {/* Remediations Table */}
      <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20">
              <tr>
                <th className="px-4 py-3 text-left">ID</th>
                <th className="px-4 py-3 text-left">Vulnerability</th>
                <th className="px-4 py-3 text-left">Action</th>
                <th className="px-4 py-3 text-left">Priority</th>
                <th className="px-4 py-3 text-left">Status</th>
                <th className="px-4 py-3 text-left">Progress</th>
                <th className="px-4 py-3 text-left">Assigned To</th>
                <th className="px-4 py-3 text-left">Scheduled</th>
              </tr>
            </thead>
            <tbody className="text-sm divide-y divide-gray-200 dark:divide-gray-700">
              {filteredRems.map((rem) => (
                <tr key={rem.id} className="hover:bg-gray-50 dark:hover:bg-gray-900/20">
                  <td className="px-4 py-3">
                    <span className="font-mono text-indigo-600">{rem.id}</span>
                  </td>
                  <td className="px-4 py-3">
                    <div>
                      <div className="font-medium text-gray-800 dark:text-gray-100">{rem.vulnerability}</div>
                      <div className="text-xs text-gray-600 dark:text-gray-400">{rem.cve}</div>
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    <span className="text-gray-700 dark:text-gray-300">{rem.action}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(rem.priority)}`}>
                      {rem.priority.toUpperCase()}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getStatusColor(rem.status)}`}>
                      {rem.status.replace('-', ' ').toUpperCase()}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <div className="flex items-center gap-2">
                      <div className="w-full max-w-[100px] bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                        <div 
                          className={`${rem.status === 'completed' ? 'bg-emerald-600 dark:bg-emerald-700' : rem.status === 'failed' ? 'bg-rose-600 dark:bg-rose-700' : 'bg-amber-600 dark:bg-amber-700'} h-2 rounded-full`} 
                          style={{ width: `${rem.successRate}%` }}
                        ></div>
                      </div>
                      <span className="text-xs text-gray-600 dark:text-gray-400">{rem.successRate}%</span>
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    <span className="text-gray-700 dark:text-gray-300">{rem.assignedTo}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className="text-gray-600 dark:text-gray-400">{formatDate(rem.scheduledDate)}</span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}
