'use client'

import { useEffect, useState } from 'react'
import { usePageTitle } from '@/app/page-title-context'

interface Recommendation {
  id: string
  title: string
  priority: 'critical' | 'high' | 'medium' | 'low'
  category: 'patching' | 'configuration' | 'access-control' | 'monitoring'
  affectedAssets: number
  estimatedEffort: string
  potentialRiskReduction: number
  status: 'pending' | 'in-progress' | 'completed' | 'dismissed'
  dueDate: string
}

export default function RecommendationsPage() {
  const { setPageTitle } = usePageTitle()
  const [filterPriority, setFilterPriority] = useState<string>('all')
  const [selectedRec, setSelectedRec] = useState<Recommendation | null>(null)

  useEffect(() => {
    setPageTitle('Recommendations')
  }, [setPageTitle])

  const recommendations: Recommendation[] = [
    {
      id: 'REC-001',
      title: 'Patch Critical Apache Struts Vulnerability',
      priority: 'critical',
      category: 'patching',
      affectedAssets: 23,
      estimatedEffort: '4 hours',
      potentialRiskReduction: 95,
      status: 'in-progress',
      dueDate: '2024-04-01'
    },
    {
      id: 'REC-002',
      title: 'Enable MFA for All Administrative Accounts',
      priority: 'high',
      category: 'access-control',
      affectedAssets: 45,
      estimatedEffort: '2 days',
      potentialRiskReduction: 87,
      status: 'pending',
      dueDate: '2024-04-05'
    },
    {
      id: 'REC-003',
      title: 'Update TLS Configuration to v1.3',
      priority: 'medium',
      category: 'configuration',
      affectedAssets: 67,
      estimatedEffort: '1 day',
      potentialRiskReduction: 65,
      status: 'pending',
      dueDate: '2024-04-10'
    },
    {
      id: 'REC-004',
      title: 'Implement EDR on All Endpoints',
      priority: 'high',
      category: 'monitoring',
      affectedAssets: 234,
      estimatedEffort: '1 week',
      potentialRiskReduction: 82,
      status: 'in-progress',
      dueDate: '2024-04-15'
    },
    {
      id: 'REC-005',
      title: 'Disable SMBv1 Protocol',
      priority: 'critical',
      category: 'configuration',
      affectedAssets: 89,
      estimatedEffort: '6 hours',
      potentialRiskReduction: 91,
      status: 'pending',
      dueDate: '2024-04-02'
    }
  ]

  const getPriorityColor = (priority: string) => {
    const colors = {
      critical: 'bg-rose-600 dark:bg-rose-700/20 text-red-700 dark:text-red-400',
      high: 'bg-orange-600 dark:bg-orange-700/20 text-orange-700 dark:text-orange-400',
      medium: 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      low: 'bg-indigo-600 dark:bg-indigo-600/20 text-blue-700 dark:text-blue-400'
    }
    return colors[priority as keyof typeof colors]
  }

  const getStatusColor = (status: string) => {
    const colors = {
      pending: 'bg-gray-500/20 text-gray-700 dark:text-gray-400',
      'in-progress': 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      completed: 'bg-emerald-600 dark:bg-emerald-700/20 text-green-700 dark:text-green-400',
      dismissed: 'bg-gray-500/20 text-gray-700 dark:text-gray-400'
    }
    return colors[status as keyof typeof colors]
  }

  const filteredRecs = filterPriority === 'all' 
    ? recommendations 
    : recommendations.filter(r => r.priority === filterPriority)

  const stats = {
    total: recommendations.length,
    critical: recommendations.filter(r => r.priority === 'critical').length,
    pending: recommendations.filter(r => r.status === 'pending').length,
    avgRiskReduction: Math.round(recommendations.reduce((sum, r) => sum + r.potentialRiskReduction, 0) / recommendations.length)
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-[96rem] mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl md:text-3xl text-gray-800 dark:text-gray-100 font-bold mb-2">Security Recommendations</h1>
        <p className="text-gray-600 dark:text-gray-400 text-lg">Prioritized recommendations to improve your security posture</p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Recommendations</div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{stats.total}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Critical Priority</div>
            <div className="text-3xl font-bold text-rose-700 dark:text-rose-400">{stats.critical}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Pending Action</div>
            <div className="text-3xl font-bold text-orange-700 dark:text-orange-400">{stats.pending}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Avg Risk Reduction</div>
            <div className="text-3xl font-bold text-emerald-700 dark:text-emerald-400">{stats.avgRiskReduction}%</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="mb-6">
        <div className="flex flex-wrap gap-2">
          {['all', 'critical', 'high', 'medium', 'low'].map(priority => (
            <button
              key={priority}
              onClick={() => setFilterPriority(priority)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                filterPriority === priority
                  ? 'bg-indigo-600 dark:bg-indigo-500 text-white shadow-sm'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700/50'
              }`}
            >
              {priority === 'all' ? 'All Priorities' : priority.charAt(0).toUpperCase() + priority.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Recommendations List */}
      <div className="space-y-4">
        {filteredRecs.map((rec) => (
          <div key={rec.id} className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-2">
                  <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-100">{rec.title}</h3>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(rec.priority)}`}>
                    {rec.priority.toUpperCase()}
                  </span>
                </div>
                <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                  <span>ID: {rec.id}</span>
                  <span>•</span>
                  <span>Category: {rec.category.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}</span>
                  <span>•</span>
                  <span>Due: {new Date(rec.dueDate).toLocaleDateString()}</span>
                </div>
              </div>
              <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(rec.status)}`}>
                {rec.status.replace('-', ' ').toUpperCase()}
              </span>
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div className="bg-gray-50 dark:bg-gray-900/20 rounded-lg p-3">
                <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Affected Assets</div>
                <div className="text-xl font-bold text-gray-900 dark:text-gray-100">{rec.affectedAssets}</div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-900/20 rounded-lg p-3">
                <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Estimated Effort</div>
                <div className="text-sm font-semibold text-gray-900 dark:text-gray-100">{rec.estimatedEffort}</div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-900/20 rounded-lg p-3">
                <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Risk Reduction</div>
                <div className="text-xl font-bold text-emerald-700 dark:text-emerald-400">{rec.potentialRiskReduction}%</div>
              </div>
            </div>

            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex gap-3">
                <button 
                  onClick={() => setSelectedRec(rec)}
                  className="btn-sm bg-indigo-600 dark:bg-indigo-600 hover:bg-indigo-700 dark:hover:bg-indigo-700 text-white"
                >
                  View Details
                </button>
                {rec.status === 'pending' && (
                  <button className="btn-sm bg-emerald-600 dark:bg-emerald-700 hover:bg-green-600 text-white">
                    Start Implementation
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
