'use client'

import { useEffect, useState } from 'react'
import { usePageTitle } from '@/app/page-title-context'

interface SoftwareInventory {
  id: string
  name: string
  version: string
  vendor: string
  installations: number
  knownVulnerabilities: number
  latestVersion: string
  updateAvailable: boolean
  riskLevel: 'critical' | 'high' | 'medium' | 'low'
}

export default function InventoriesPage() {
  const { setPageTitle } = usePageTitle()
  const [searchQuery, setSearchQuery] = useState('')
  const [filterRisk, setFilterRisk] = useState<string>('all')

  useEffect(() => {
    setPageTitle('Software Inventories')
  }, [setPageTitle])

  const inventory: SoftwareInventory[] = [
    {
      id: 'SW-001',
      name: 'Apache Struts',
      version: '2.5.28',
      vendor: 'Apache',
      installations: 23,
      knownVulnerabilities: 3,
      latestVersion: '2.5.31',
      updateAvailable: true,
      riskLevel: 'critical'
    },
    {
      id: 'SW-002',
      name: 'Windows Server',
      version: '2019 Build 17763',
      vendor: 'Microsoft',
      installations: 45,
      knownVulnerabilities: 7,
      latestVersion: '2022 Build 20348',
      updateAvailable: true,
      riskLevel: 'high'
    },
    {
      id: 'SW-003',
      name: 'nginx',
      version: '1.24.0',
      vendor: 'NGINX Inc',
      installations: 34,
      knownVulnerabilities: 0,
      latestVersion: '1.25.3',
      updateAvailable: true,
      riskLevel: 'low'
    },
    {
      id: 'SW-004',
      name: 'PostgreSQL',
      version: '14.10',
      vendor: 'PostgreSQL',
      installations: 12,
      knownVulnerabilities: 1,
      latestVersion: '16.2',
      updateAvailable: true,
      riskLevel: 'medium'
    },
    {
      id: 'SW-005',
      name: 'Docker',
      version: '24.0.7',
      vendor: 'Docker Inc',
      installations: 89,
      knownVulnerabilities: 2,
      latestVersion: '25.0.3',
      updateAvailable: true,
      riskLevel: 'high'
    },
    {
      id: 'SW-006',
      name: 'OpenSSL',
      version: '3.0.8',
      vendor: 'OpenSSL',
      installations: 156,
      knownVulnerabilities: 0,
      latestVersion: '3.2.1',
      updateAvailable: true,
      riskLevel: 'low'
    }
  ]

  const getRiskColor = (risk: string) => {
    const colors = {
      critical: 'bg-rose-600 dark:bg-rose-700/20 text-red-700 dark:text-red-400',
      high: 'bg-orange-600 dark:bg-orange-700/20 text-orange-700 dark:text-orange-400',
      medium: 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      low: 'bg-emerald-600 dark:bg-emerald-700/20 text-green-700 dark:text-green-400'
    }
    return colors[risk as keyof typeof colors]
  }

  const filteredInventory = inventory.filter(item => {
    const matchesRisk = filterRisk === 'all' || item.riskLevel === filterRisk
    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         item.vendor.toLowerCase().includes(searchQuery.toLowerCase())
    return matchesRisk && matchesSearch
  })

  const stats = {
    total: inventory.length,
    critical: inventory.filter(i => i.riskLevel === 'critical').length,
    totalInstallations: inventory.reduce((sum, i) => sum + i.installations, 0),
    outdated: inventory.filter(i => i.updateAvailable).length
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-[96rem] mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl md:text-3xl text-gray-800 dark:text-gray-100 font-bold mb-2">Software Inventory</h1>
        <p className="text-gray-600  dark:text-gray-400">Track software assets and their vulnerability status</p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Software Assets</div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{stats.total}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Critical Risk</div>
            <div className="text-3xl font-bold text-rose-700 dark:text-rose-400">{stats.critical}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Installations</div>
            <div className="text-3xl font-bold text-sky-800 dark:text-sky-300">{stats.totalInstallations}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Updates Available</div>
            <div className="text-3xl font-bold text-orange-700 dark:text-orange-400">{stats.outdated}</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="mb-6">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <input 
              type="text"
              placeholder="Search software..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="form-input w-full bg-white dark:bg-gray-800"
            />
          </div>
          <div className="flex gap-2">
            {['all', 'critical', 'high', 'medium', 'low'].map(risk => (
              <button
                key={risk}
                onClick={() => setFilterRisk(risk)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  filterRisk === risk
                    ? 'bg-slate-700 dark:bg-slate-600 text-white shadow-sm'
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                }`}
              >
                {risk === 'all' ? 'All' : risk.charAt(0).toUpperCase() + risk.slice(1)}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Inventory Table */}
      <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20">
              <tr>
                <th className="px-4 py-3 text-left">Software</th>
                <th className="px-4 py-3 text-left">Version</th>
                <th className="px-4 py-3 text-left">Vendor</th>
                <th className="px-4 py-3 text-left">Installations</th>
                <th className="px-4 py-3 text-left">Vulnerabilities</th>
                <th className="px-4 py-3 text-left">Latest Version</th>
                <th className="px-4 py-3 text-left">Risk Level</th>
              </tr>
            </thead>
            <tbody className="text-sm divide-y divide-gray-200 dark:divide-gray-700">
              {filteredInventory.map((item) => (
                <tr key={item.id} className="hover:bg-gray-50 dark:hover:bg-gray-900/20">
                  <td className="px-4 py-3">
                    <span className="font-medium text-gray-800 dark:text-gray-100">{item.name}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className="font-mono text-gray-700 dark:text-gray-300">{item.version}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className="text-gray-600 dark:text-gray-400">{item.vendor}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className="font-semibold text-gray-900 dark:text-gray-100">{item.installations}</span>
                  </td>
                  <td className="px-4 py-3">
                    <span className={`font-semibold ${item.knownVulnerabilities > 0 ? 'text-rose-700 dark:text-rose-400' : 'text-emerald-700 dark:text-emerald-400'}`}>
                      {item.knownVulnerabilities}
                    </span>
                  </td>
                  <td className="px-4 py-3">
                    <div className="flex items-center gap-2">
                      <span className="font-mono text-gray-700 dark:text-gray-300">{item.latestVersion}</span>
                      {item.updateAvailable && (
                        <svg className="w-4 h-4 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clipRule="evenodd" />
                        </svg>
                      )}
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getRiskColor(item.riskLevel)}`}>
                      {item.riskLevel.toUpperCase()}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}
