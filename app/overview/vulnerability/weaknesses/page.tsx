'use client'
import { formatDate, formatDateTime } from '@/lib/utils'


import { useEffect, useState } from 'react'
import { usePageTitle } from '@/app/page-title-context'

interface Weakness {
  id: string
  cwe: string
  name: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  occurrences: number
  affectedComponents: string[]
  mitigationStrategy: string
  status: 'identified' | 'analyzing' | 'mitigating' | 'resolved'
  discoveredAt: string
}

export default function WeaknessesPage() {
  const { setPageTitle } = usePageTitle()
  const [selectedWeakness, setSelectedWeakness] = useState<Weakness | null>(null)

  useEffect(() => {
    setPageTitle('Weaknesses')
  }, [setPageTitle])

  const weaknesses: Weakness[] = [
    {
      id: 'CWE-001',
      cwe: 'CWE-89',
      name: 'SQL Injection',
      severity: 'critical',
      occurrences: 12,
      affectedComponents: ['Web Application', 'API Gateway', 'Admin Portal'],
      mitigationStrategy: 'Implement parameterized queries and input validation',
      status: 'mitigating',
      discoveredAt: '2024-03-15'
    },
    {
      id: 'CWE-002',
      cwe: 'CWE-79',
      name: 'Cross-site Scripting (XSS)',
      severity: 'high',
      occurrences: 8,
      affectedComponents: ['Web Application', 'User Dashboard'],
      mitigationStrategy: 'Implement output encoding and CSP headers',
      status: 'analyzing',
      discoveredAt: '2024-03-20'
    },
    {
      id: 'CWE-003',
      cwe: 'CWE-287',
      name: 'Improper Authentication',
      severity: 'critical',
      occurrences: 5,
      affectedComponents: ['Authentication Service', 'Mobile App'],
      mitigationStrategy: 'Implement MFA and strengthen authentication mechanisms',
      status: 'mitigating',
      discoveredAt: '2024-03-10'
    },
    {
      id: 'CWE-004',
      cwe: 'CWE-200',
      name: 'Information Exposure',
      severity: 'medium',
      occurrences: 15,
      affectedComponents: ['API Endpoints', 'Error Pages'],
      mitigationStrategy: 'Remove sensitive information from error messages',
      status: 'identified',
      discoveredAt: '2024-03-22'
    },
    {
      id: 'CWE-005',
      cwe: 'CWE-22',
      name: 'Path Traversal',
      severity: 'high',
      occurrences: 3,
      affectedComponents: ['File Upload Service'],
      mitigationStrategy: 'Implement proper file path validation',
      status: 'resolved',
      discoveredAt: '2024-02-28'
    }
  ]

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: 'bg-rose-600 dark:bg-rose-700/20 text-red-700 dark:text-red-400',
      high: 'bg-orange-600 dark:bg-orange-700/20 text-orange-700 dark:text-orange-400',
      medium: 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      low: 'bg-indigo-600 dark:bg-indigo-600/20 text-blue-700 dark:text-blue-400'
    }
    return colors[severity as keyof typeof colors]
  }

  const getStatusColor = (status: string) => {
    const colors = {
      identified: 'bg-indigo-500/20 text-purple-700 dark:text-purple-400',
      analyzing: 'bg-indigo-600 dark:bg-indigo-600/20 text-blue-700 dark:text-blue-400',
      mitigating: 'bg-amber-600 dark:bg-amber-700/20 text-yellow-700 dark:text-yellow-400',
      resolved: 'bg-emerald-600 dark:bg-emerald-700/20 text-green-700 dark:text-green-400'
    }
    return colors[status as keyof typeof colors]
  }

  const stats = {
    total: weaknesses.length,
    critical: weaknesses.filter(w => w.severity === 'critical').length,
    totalOccurrences: weaknesses.reduce((sum, w) => sum + w.occurrences, 0),
    resolved: weaknesses.filter(w => w.status === 'resolved').length
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-[96rem] mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl md:text-3xl text-gray-800 dark:text-gray-100 font-bold mb-2">Security Weaknesses (CWE)</h1>
        <p className="text-gray-600  dark:text-gray-400">Track Common Weakness Enumeration findings and mitigation efforts</p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Weaknesses</div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{stats.total}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Critical Severity</div>
            <div className="text-3xl font-bold text-rose-700 dark:text-rose-400">{stats.critical}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Occurrences</div>
            <div className="text-3xl font-bold text-orange-700 dark:text-orange-400">{stats.totalOccurrences}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Resolved</div>
            <div className="text-3xl font-bold text-emerald-700 dark:text-emerald-400">{stats.resolved}</div>
          </div>
        </div>
      </div>

      {/* Weaknesses List */}
      <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100">Identified Weaknesses</h2>
        </div>
        <div className="divide-y divide-gray-200 dark:divide-gray-700">
          {weaknesses.map((weakness) => (
            <div
              key={weakness.id}
              onClick={() => setSelectedWeakness(weakness)}
              className="p-6 hover:bg-gray-50 dark:hover:bg-gray-900/20 cursor-pointer transition-all duration-200"
            >
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="text-base font-semibold text-gray-800 dark:text-gray-100">{weakness.name}</h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(weakness.severity)}`}>
                      {weakness.severity.toUpperCase()}
                    </span>
                  </div>
                  <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-2">
                    <span className="font-mono text-indigo-600">{weakness.cwe}</span>
                    <span>•</span>
                    <span>{weakness.occurrences} occurrences</span>
                    <span>•</span>
                    <span>Discovered: {formatDate(weakness.discoveredAt)}</span>
                  </div>
                  <div className="text-sm text-gray-700 dark:text-gray-300 mb-2">
                    Mitigation: {weakness.mitigationStrategy}
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {weakness.affectedComponents.map((component, idx) => (
                      <span key={idx} className="inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                        {component}
                      </span>
                    ))}
                  </div>
                </div>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(weakness.status)}`}>
                  {weakness.status.toUpperCase()}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Weakness Detail Panel */}
      {selectedWeakness && (
        <>
          <div 
            className="fixed inset-0 bg-gray-900/50 z-40"
            onClick={() => setSelectedWeakness(null)}
          />
          <div className="fixed inset-y-0 right-0 w-full md:w-2/3 lg:w-1/2 bg-white dark:bg-gray-800 shadow-xl z-50 overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-800 dark:text-gray-100">Weakness Details</h2>
                <button
                  onClick={() => setSelectedWeakness(null)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">CWE ID</div>
                  <div className="text-lg font-mono text-indigo-600">{selectedWeakness.cwe}</div>
                </div>

                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">Name</div>
                  <div className="text-lg font-semibold text-gray-800 dark:text-gray-100">{selectedWeakness.name}</div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">Severity</div>
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getSeverityColor(selectedWeakness.severity)}`}>
                      {selectedWeakness.severity.toUpperCase()}
                    </span>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">Status</div>
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(selectedWeakness.status)}`}>
                      {selectedWeakness.status.toUpperCase()}
                    </span>
                  </div>
                </div>

                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">Occurrences</div>
                  <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{selectedWeakness.occurrences}</div>
                </div>

                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">Affected Components</div>
                  <div className="flex flex-wrap gap-2">
                    {selectedWeakness.affectedComponents.map((component, idx) => (
                      <span key={idx} className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                        {component}
                      </span>
                    ))}
                  </div>
                </div>

                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">Mitigation Strategy</div>
                  <div className="bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-3 rounded">
                    <div className="text-sm text-gray-800 dark:text-gray-100">{selectedWeakness.mitigationStrategy}</div>
                  </div>
                </div>

                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-1">Discovered At</div>
                  <div className="text-gray-800 dark:text-gray-100">{formatDate(selectedWeakness.discoveredAt)}</div>
                </div>

                <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
                  <a 
                    href={`https://cwe.mitre.org/data/definitions/${selectedWeakness.cwe.replace('CWE-', '')}.html`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn bg-indigo-600 dark:bg-indigo-600 hover:bg-indigo-700 dark:hover:bg-indigo-700 text-white w-full"
                  >
                    View on MITRE CWE
                  </a>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  )
}
