'use client'

import { useEffect } from 'react'
import { usePageTitle } from '@/app/page-title-context'

interface TimelineEvent {
  id: string
  timestamp: string
  type: 'discovered' | 'assigned' | 'patched' | 'verified' | 'closed'
  vulnerability: string
  cve: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  description: string
  actor: string
}

export default function EventTimelinePage() {
  const { setPageTitle } = usePageTitle()

  useEffect(() => {
    setPageTitle('Event Timeline')
  }, [setPageTitle])

  const events: TimelineEvent[] = [
    {
      id: 'EVT-001',
      timestamp: '2024-03-30 14:23:00',
      type: 'discovered',
      vulnerability: 'Apache Struts RCE',
      cve: 'CVE-2024-1234',
      severity: 'critical',
      description: 'Critical vulnerability discovered in Apache Struts affecting 23 systems',
      actor: 'Vulnerability Scanner'
    },
    {
      id: 'EVT-002',
      timestamp: '2024-03-30 14:45:00',
      type: 'assigned',
      vulnerability: 'Apache Struts RCE',
      cve: 'CVE-2024-1234',
      severity: 'critical',
      description: 'Assigned to DevOps team for immediate patching',
      actor: 'SOC Manager'
    },
    {
      id: 'EVT-003',
      timestamp: '2024-03-29 16:12:00',
      type: 'patched',
      vulnerability: 'SQL Injection',
      cve: 'CVE-2024-5678',
      severity: 'high',
      description: 'Security patch applied to 8 out of 12 affected systems',
      actor: 'DevOps Team'
    },
    {
      id: 'EVT-004',
      timestamp: '2024-03-28 11:30:00',
      type: 'verified',
      vulnerability: 'XSS Vulnerability',
      cve: 'CVE-2024-3456',
      severity: 'medium',
      description: 'Remediation verified successfully on all affected systems',
      actor: 'Security Analyst'
    },
    {
      id: 'EVT-005',
      timestamp: '2024-03-28 09:15:00',
      type: 'closed',
      vulnerability: 'XSS Vulnerability',
      cve: 'CVE-2024-3456',
      severity: 'medium',
      description: 'Vulnerability closed after successful remediation and verification',
      actor: 'SOC Manager'
    },
    {
      id: 'EVT-006',
      timestamp: '2024-03-27 13:45:00',
      type: 'discovered',
      vulnerability: 'Privilege Escalation',
      cve: 'CVE-2024-7890',
      severity: 'high',
      description: 'Linux kernel privilege escalation vulnerability discovered',
      actor: 'Vulnerability Scanner'
    },
    {
      id: 'EVT-007',
      timestamp: '2024-03-27 14:00:00',
      type: 'assigned',
      vulnerability: 'Privilege Escalation',
      cve: 'CVE-2024-7890',
      severity: 'high',
      description: 'Assigned to System Administrators for kernel updates',
      actor: 'Vulnerability Manager'
    },
    {
      id: 'EVT-008',
      timestamp: '2024-03-26 10:20:00',
      type: 'patched',
      vulnerability: 'Authentication Bypass',
      cve: 'CVE-2024-9012',
      severity: 'critical',
      description: 'Hotfix deployed to all 45 affected systems',
      actor: 'Security Team'
    },
    {
      id: 'EVT-009',
      timestamp: '2024-03-26 15:30:00',
      type: 'verified',
      vulnerability: 'Authentication Bypass',
      cve: 'CVE-2024-9012',
      severity: 'critical',
      description: 'Patch verification completed successfully',
      actor: 'Security Team'
    },
    {
      id: 'EVT-010',
      timestamp: '2024-03-26 16:00:00',
      type: 'closed',
      vulnerability: 'Authentication Bypass',
      cve: 'CVE-2024-9012',
      severity: 'critical',
      description: 'Vulnerability remediated and closed',
      actor: 'SOC Manager'
    }
  ]

  const getTypeIcon = (type: string) => {
    const icons = {
      discovered: (
        <svg className="w-5 h-5 text-indigo-600 dark:text-purple-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
          <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
        </svg>
      ),
      assigned: (
        <svg className="w-5 h-5 text-indigo-700 dark:text-indigo-300" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" />
        </svg>
      ),
      patched: (
        <svg className="w-5 h-5 text-amber-700 dark:text-amber-400" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
        </svg>
      ),
      verified: (
        <svg className="w-5 h-5 text-emerald-700 dark:text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
        </svg>
      ),
      closed: (
        <svg className="w-5 h-5 text-gray-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
        </svg>
      )
    }
    return icons[type as keyof typeof icons]
  }

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: 'text-rose-700 dark:text-rose-400',
      high: 'text-orange-700 dark:text-orange-400',
      medium: 'text-amber-700 dark:text-amber-400',
      low: 'text-indigo-700 dark:text-indigo-300'
    }
    return colors[severity as keyof typeof colors]
  }

  const stats = {
    totalEvents: events.length,
    discovered: events.filter(e => e.type === 'discovered').length,
    patched: events.filter(e => e.type === 'patched').length,
    closed: events.filter(e => e.type === 'closed').length
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-[96rem] mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl md:text-3xl text-gray-800 dark:text-gray-100 font-bold mb-2">Vulnerability Event Timeline</h1>
        <p className="text-gray-600  dark:text-gray-400">Track all vulnerability-related events and activities</p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Total Events</div>
            <div className="text-3xl font-bold text-gray-900 dark:text-gray-100">{stats.totalEvents}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Discovered</div>
            <div className="text-3xl font-bold text-indigo-600 dark:text-purple-400">{stats.discovered}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Patched</div>
            <div className="text-3xl font-bold text-amber-700 dark:text-amber-400">{stats.patched}</div>
          </div>
        </div>
        <div className="col-span-12 sm:col-span-6 lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-5">
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">Closed</div>
            <div className="text-3xl font-bold text-emerald-700 dark:text-emerald-400">{stats.closed}</div>
          </div>
        </div>
      </div>

      {/* Timeline */}
      <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-6">
        <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-6">Activity Timeline</h2>
        
        <div className="relative">
          {/* Timeline line */}
          <div className="absolute left-[27px] top-0 bottom-0 w-0.5 bg-gray-200 dark:bg-gray-700"></div>
          
          {/* Timeline events */}
          <div className="space-y-4">
            {events.map((event, idx) => (
              <div key={event.id} className="relative flex items-start gap-4">
                {/* Icon */}
                <div className="relative z-10 flex items-center justify-center w-14 h-14 bg-white dark:bg-gray-800 rounded-full border-4 border-gray-100 dark:border-gray-700">
                  {getTypeIcon(event.type)}
                </div>
                
                {/* Content */}
                <div className="flex-1 bg-gray-50 dark:bg-gray-900/20 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="text-base font-semibold text-gray-800 dark:text-gray-100">{event.vulnerability}</h3>
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(event.severity)}`}>
                          {event.severity.toUpperCase()}
                        </span>
                      </div>
                      <div className="text-sm text-gray-700 dark:text-gray-300 mb-2">{event.description}</div>
                      <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
                        <span className="font-mono text-indigo-600">{event.cve}</span>
                        <span>•</span>
                        <span>{event.actor}</span>
                        <span>•</span>
                        <span>{new Date(event.timestamp).toLocaleString()}</span>
                      </div>
                    </div>
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 capitalize">
                      {event.type.replace('-', ' ')}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}
