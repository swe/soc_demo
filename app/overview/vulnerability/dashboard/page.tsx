'use client'
import { formatDate, formatDateTime } from '@/lib/utils'


import { useEffect, useState } from 'react'
import { usePageTitle } from '@/app/page-title-context'
import { PageHeader, Card, Badge } from '@/components/ui/card'
import Link from 'next/link'

interface Vulnerability {
  id: string
  cve: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  cvssScore: number
  title: string
  affectedAssets: number
  status: 'open' | 'patching' | 'mitigated' | 'closed'
  discoveredAt: string
  ageInDays: number
}

export default function VulnerabilityDashboardPage() {
  const { setPageTitle } = usePageTitle()
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null)

  useEffect(() => {
    setPageTitle('Vulnerability Dashboard')
  }, [setPageTitle])

  const vulnerabilities: Vulnerability[] = [
    {
      id: 'VUL-001',
      cve: 'CVE-2024-1234',
      severity: 'critical',
      cvssScore: 9.8,
      title: 'Remote Code Execution in Apache Struts',
      affectedAssets: 23,
      status: 'patching',
      discoveredAt: '2024-03-28',
      ageInDays: 3
    },
    {
      id: 'VUL-002',
      cve: 'CVE-2024-5678',
      severity: 'high',
      cvssScore: 8.1,
      title: 'SQL Injection in Web Application',
      affectedAssets: 12,
      status: 'open',
      discoveredAt: '2024-03-25',
      ageInDays: 6
    },
    {
      id: 'VUL-003',
      cve: 'CVE-2024-9012',
      severity: 'critical',
      cvssScore: 9.1,
      title: 'Authentication Bypass in Enterprise Software',
      affectedAssets: 45,
      status: 'mitigated',
      discoveredAt: '2024-03-20',
      ageInDays: 11
    },
    {
      id: 'VUL-004',
      cve: 'CVE-2024-3456',
      severity: 'medium',
      cvssScore: 6.5,
      title: 'Cross-Site Scripting Vulnerability',
      affectedAssets: 8,
      status: 'closed',
      discoveredAt: '2024-03-15',
      ageInDays: 16
    },
    {
      id: 'VUL-005',
      cve: 'CVE-2024-7890',
      severity: 'high',
      cvssScore: 7.8,
      title: 'Privilege Escalation in Linux Kernel',
      affectedAssets: 67,
      status: 'patching',
      discoveredAt: '2024-03-22',
      ageInDays: 9
    }
  ]

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: 'bg-rose-100 dark:bg-rose-900/40 text-rose-800 dark:text-rose-300',
      high: 'bg-orange-100 dark:bg-orange-900/40 text-orange-800 dark:text-orange-300',
      medium: 'bg-amber-100 dark:bg-amber-900/40 text-amber-800 dark:text-amber-300',
      low: 'bg-slate-100 dark:bg-slate-900/40 text-slate-800 dark:text-slate-300'
    }
    return colors[severity as keyof typeof colors]
  }

  const getStatusColor = (status: string) => {
    const colors = {
      open: 'bg-rose-100 dark:bg-rose-900/40 text-rose-800 dark:text-rose-300',
      patching: 'bg-amber-100 dark:bg-amber-900/40 text-amber-800 dark:text-amber-300',
      mitigated: 'bg-sky-100 dark:bg-sky-900/40 text-indigo-700 dark:text-indigo-300',
      closed: 'bg-emerald-100 dark:bg-emerald-900/40 text-emerald-800 dark:text-emerald-300'
    }
    return colors[status as keyof typeof colors]
  }

  const stats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length,
    open: vulnerabilities.filter(v => v.status === 'open').length,
    affectedAssets: vulnerabilities.reduce((sum, v) => sum + v.affectedAssets, 0)
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-7xl mx-auto">
      <PageHeader 
        title="Vulnerability Dashboard" 
        description="Monitor and manage security vulnerabilities across your infrastructure" 
      />

      {/* Sticky Status Bar */}
      <div className="sticky top-16 z-40 before:absolute before:inset-0 before:backdrop-blur-md before:bg-white/90 dark:before:bg-gray-800/90 before:-z-10 border-b border-gray-200 dark:border-gray-700/60 mb-6 -mx-4 sm:-mx-6 lg:-mx-8">
        <div className="px-4 sm:px-6 lg:px-8 py-3">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-6">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-rose-600 dark:bg-rose-500 rounded-full animate-pulse"></div>
                <span className="font-semibold text-gray-900 dark:text-gray-100">
                  Critical: {vulnerabilities.filter(v => v.severity === 'critical').length}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-orange-600 dark:bg-orange-500 rounded-full"></div>
                <span className="font-semibold text-gray-900 dark:text-gray-100">
                  High: {vulnerabilities.filter(v => v.severity === 'high').length}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-amber-600 dark:bg-amber-500 rounded-full"></div>
                <span className="font-semibold text-gray-900 dark:text-gray-100">
                  Open: {vulnerabilities.filter(v => v.status === 'open').length}
                </span>
              </div>
              <div className="text-gray-500 dark:text-gray-400">
                Total Affected Assets: {vulnerabilities.reduce((sum, v) => sum + v.affectedAssets, 0)}
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Link href="/vulnerability/recommendations" className="text-indigo-500 hover:text-indigo-600 dark:text-indigo-400 dark:hover:text-slate-300 font-medium">
                View Recommendations →
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Vulnerability by Severity */}
      <div className="grid grid-cols-12 gap-4 mb-6">
        <div className="col-span-12 lg:col-span-8">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100">Vulnerability Distribution</h2>
              <Link href="/vulnerability/recommendations" className="text-sm text-indigo-500 hover:text-indigo-600 dark:text-indigo-400 dark:hover:text-slate-300 font-medium">
                View Recommendations →
              </Link>
            </div>
            <div className="grid grid-cols-4 gap-4">
              {[
                { severity: 'Critical', count: stats.critical, color: 'bg-rose-600 dark:bg-rose-700' },
                { severity: 'High', count: stats.high, color: 'bg-orange-600 dark:bg-orange-700' },
                { severity: 'Medium', count: stats.medium, color: 'bg-amber-600 dark:bg-amber-700' },
                { severity: 'Low', count: stats.low, color: 'bg-indigo-500 dark:bg-indigo-600' }
              ].map((item, idx) => (
                <div key={idx} className={`${item.color} text-white rounded-lg p-6 text-center`}>
                  <div className="text-4xl font-bold mb-2">{item.count}</div>
                  <div className="text-sm opacity-90">{item.severity}</div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="col-span-12 lg:col-span-4">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-6">
            <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4">Status Breakdown</h2>
            <div className="space-y-3">
              {[
                { status: 'Open', count: stats.open, color: 'bg-rose-600 dark:bg-rose-700' },
                { status: 'Patching', count: vulnerabilities.filter(v => v.status === 'patching').length, color: 'bg-amber-600 dark:bg-amber-700' },
                { status: 'Mitigated', count: vulnerabilities.filter(v => v.status === 'mitigated').length, color: 'bg-indigo-600 dark:bg-indigo-600' },
                { status: 'Closed', count: vulnerabilities.filter(v => v.status === 'closed').length, color: 'bg-emerald-600 dark:bg-emerald-700' }
              ].map((item, idx) => (
                <div key={idx}>
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{item.status}</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{item.count}</span>
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                    <div className={`${item.color} h-2 rounded-full`} style={{ width: `${(item.count / stats.total) * 100}%` }}></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Recent Vulnerabilities - Card View */}
      <div className="grid grid-cols-12 gap-4">
        <div className="col-span-12">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-xl p-6">
            <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-6">Recent Vulnerabilities</h2>
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div 
                  key={vuln.id}
                  onClick={() => setSelectedVuln(selectedVuln?.id === vuln.id ? null : vuln)}
                  className="border-l-4 border-gray-200 dark:border-gray-700 hover:border-indigo-600 dark:hover:border-indigo-600 transition-all cursor-pointer"
                  style={{
                    borderLeftColor: vuln.severity === 'critical' ? '#ef4444' : 
                                   vuln.severity === 'high' ? '#f97316' : 
                                   vuln.severity === 'medium' ? '#eab308' : '#3b82f6'
                  }}
                >
                  <div className="p-4 bg-gray-50 dark:bg-gray-900/20 rounded-r-lg">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="font-mono text-sm text-indigo-500 hover:text-indigo-600 dark:text-indigo-400 dark:hover:text-slate-300">{vuln.cve}</span>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity.toUpperCase()}
                          </span>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getStatusColor(vuln.status)}`}>
                            {vuln.status.toUpperCase()}
                          </span>
                        </div>
                        <h3 className="text-base font-semibold text-gray-800 dark:text-gray-100 mb-2">{vuln.title}</h3>
                        <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                          <div className="flex items-center gap-1">
                            <span className="font-semibold">CVSS:</span>
                            <span className="font-bold text-lg">{vuln.cvssScore}</span>
                          </div>
                          <span>•</span>
                          <span>{vuln.affectedAssets} affected assets</span>
                          <span>•</span>
                          <span className={vuln.ageInDays > 7 ? 'text-rose-700 dark:text-rose-400 font-medium' : ''}>
                            {vuln.ageInDays} days old
                          </span>
                        </div>
                      </div>
                      <button className="text-gray-400 hover:text-indigo-600 transition-all duration-200">
                        <svg 
                          className={`w-5 h-5 transform transition-transform ${selectedVuln?.id === vuln.id ? 'rotate-180' : ''}`} 
                          fill="none" 
                          viewBox="0 0 24 24" 
                          stroke="currentColor"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </button>
                    </div>

                    {/* Expanded Details */}
                    {selectedVuln?.id === vuln.id && (
                      <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 animate-in fade-in duration-200">
                        <div className="grid grid-cols-3 gap-4 mb-4">
                          <div className="bg-white dark:bg-gray-800 rounded-lg p-3">
                            <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Discovered</div>
                            <div className="text-sm font-semibold text-gray-900 dark:text-gray-100">
                              {formatDate(vuln.discoveredAt)}
                            </div>
                          </div>
                          <div className="bg-white dark:bg-gray-800 rounded-lg p-3">
                            <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Age</div>
                            <div className={`text-sm font-semibold ${vuln.ageInDays > 7 ? 'text-rose-700 dark:text-rose-400' : 'text-gray-900 dark:text-gray-100'}`}>
                              {vuln.ageInDays} days
                            </div>
                          </div>
                          <div className="bg-white dark:bg-gray-800 rounded-lg p-3">
                            <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">Assets</div>
                            <div className="text-sm font-semibold text-gray-900 dark:text-gray-100">
                              {vuln.affectedAssets}
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-3">
                          <button className="flex-1 btn-sm bg-indigo-600 hover:bg-slate-800 dark:bg-indigo-500 dark:hover:bg-indigo-600 text-white">
                            Assign to Team
                          </button>
                          <button className="flex-1 btn-sm bg-orange-600 hover:bg-orange-700 dark:bg-orange-700 dark:hover:bg-orange-800 text-white">
                            Start Remediation
                          </button>
                          <button className="flex-1 btn-sm bg-indigo-600 hover:bg-indigo-600 dark:bg-indigo-600 dark:hover:bg-indigo-700 text-white">
                            View CVE Details
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

    </div>
  )
}
