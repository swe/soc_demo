'use client'

import { useState, useEffect } from 'react'

const vulnerabilitySteps = [
  {
    id: 1,
    title: "Vulnerability Monitoring",
    subtitle: "Search, prioritize and enrich vulnerability information in a unified platform",
    description: "Svalbard Intelligence provides operational and complete information about all registered vulnerabilities, enabling you to implement a vulnerability management process.",
    highlights: ["Real-time monitoring", "Unified platform", "Complete information"],
    image: "/images/vulnerability-1.jpg"
  },
  {
    id: 2,
    title: "Criticality Assessment",
    subtitle: "Threat assessment and probable impact evaluation when exploiting vulnerabilities",
    description: "The Svalbard Intelligence platform presents all contextual information, including criticality level assessment, exploits and software update testing results. Using our analytics results, you can determine your response and remediation priorities.",
    highlights: ["Criticality assessment", "Exploit analysis", "Priority determination"],
    image: "/images/vulnerability-2.jpg"
  },
  {
    id: 3,
    title: "Determining Methods and Remediation Priorities",
    subtitle: "Focus on vulnerabilities that can actually impact your organization",
    description: "We provide comprehensive information about vulnerability mitigation measures, allowing you to quickly plan remediation tasks.",
    highlights: ["Impact assessment", "Mitigation measures", "Quick planning"],
    image: "/images/vulnerability-3.jpg"
  },
  {
    id: 4,
    title: "Vulnerability Remediation",
    subtitle: "Threat assessment and probable impact evaluation when exploiting vulnerabilities",
    description: "Our software update testing results will help you protect yourself from possible destructive impact during remediation. The Svalbard Intelligence team has deep expertise in testing software for undocumented update capabilities and is ready to share the results.",
    highlights: ["Update testing", "Deep expertise", "Destructive impact protection"],
    image: "/images/vulnerability-4.jpg"
  },
  {
    id: 5,
    title: "Vulnerability Control",
    subtitle: "Use all methods of vulnerability remediation control (scanners, security assessment, IT infrastructure management systems)",
    description: "Make decisions about escalation in case of deviations and non-compliance. Visualize data for management decision making.",
    highlights: ["Multiple control methods", "Escalation decisions", "Data visualization"],
    image: "/images/vulnerability-5.jpg"
  }
]

export default function VulnerabilityManagement() {
  const [currentSlide, setCurrentSlide] = useState(0)

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % vulnerabilitySteps.length)
    }, 5000) // Change slide every 5 seconds

    return () => clearInterval(interval)
  }, [])

  const goToSlide = (index: number) => {
    setCurrentSlide(index)
  }

  return (
    <section className="relative overflow-hidden">
      {/* Background gradient */}
      <div className="absolute top-0 left-0 right-0 bg-gradient-to-b from-gray-800 to-gray-900 opacity-60 h-[10rem] pointer-events-none -z-10" aria-hidden="true" />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6">
        <div className="py-12 md:py-20">
          {/* Section header */}
          <div className="max-w-3xl mx-auto text-center pb-12 md:pb-20">
            <h2 className="text-4xl md:text-5xl font-uncut-sans mb-4">Vulnerability Management Process</h2>
          </div>

          {/* Slider container */}
          <div className="relative">
            {/* Slides */}
            <div className="overflow-hidden">
              <div 
                className="flex transition-transform duration-500 ease-in-out"
                style={{ transform: `translateX(-${currentSlide * 100}%)` }}
              >
                {vulnerabilitySteps.map((step, index) => (
                  <div key={step.id} className="w-full flex-shrink-0">
                    <div className="max-w-6xl mx-auto flex flex-col lg:flex-row items-center space-y-8 lg:space-y-0 lg:space-x-12">
                      {/* Content */}
                      <div className="lg:w-1/2 order-2 lg:order-1" data-aos="zoom-out" data-aos-delay="200">
                        <div className="text-center lg:text-left">
                          <h3 className="text-4xl md:text-5xl font-uncut-sans mb-4">{step.title}</h3>
                          <p className="text-base text-gray-400 mb-2 font-medium">{step.subtitle}</p>
                          <p className="text-base text-gray-400 mb-6 leading-relaxed">{step.description}</p>
                          
                          {/* Highlights */}
                          <ul className="text-base text-gray-400 space-y-3">
                            {step.highlights.map((highlight, idx) => (
                              <li key={idx} className="flex items-center">
                                <svg className="w-3 h-3 fill-current text-emerald-500 mr-3 shrink-0" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M10.28 2.28L3.989 8.575 1.695 6.28A1 1 0 00.28 7.695l3 3a1 1 0 001.414 0l7-7A1 1 0 0010.28 2.28z" />
                                </svg>
                                <span>{highlight}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                      
                      {/* Image placeholder */}
                      <div className="lg:w-1/2 order-1 lg:order-2" data-aos="zoom-out">
                        <div className="w-full aspect-video bg-black rounded-lg flex items-center justify-center">
                          <span className="text-gray-500 text-sm">16:9 Image Placeholder</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Navigation dots with step numbers and arrows */}
            <div className="flex justify-center items-center mt-8">
              {vulnerabilitySteps.map((_, index) => (
                <div key={index} className="flex items-center">
                  <button
                    onClick={() => goToSlide(index)}
                    className={`flex items-center justify-center w-10 h-10 rounded-full transition-all duration-300 text-sm font-medium ${
                      index === currentSlide 
                        ? 'bg-blue-500 text-white scale-110 shadow-lg' 
                        : 'bg-gray-600 text-gray-300 hover:bg-gray-500 hover:scale-105'
                    }`}
                    aria-label={`Go to step ${index + 1}`}
                  >
                    {index + 1}
                  </button>
                  
                  {/* Arrow between steps (except after the last step) */}
                  {index < vulnerabilitySteps.length - 1 && (
                    <div className="flex items-center justify-center mx-2">
                      <svg 
                        className="w-5 h-5 text-gray-500" 
                        fill="none" 
                        stroke="currentColor" 
                        viewBox="0 0 24 24"
                      >
                        <path 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          strokeWidth={2.5} 
                          d="M13 7l5 5m0 0l-5 5m5-5H6" 
                        />
                      </svg>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
